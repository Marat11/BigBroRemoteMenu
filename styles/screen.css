@charset "UTF-8";
/* Welcome to Compass.
 * In this file you should write your main styles. (or centralize your imports)
 * Import this file using the following HTML or equivalent:
 * <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" /> */
/**
Определяет flex-контейнер (инлайновый или блочный в зависимости от выбранного значения), подключает flex-контекст для всех его непосредственных потомков
*/
/*
Устанавливает главную ось main-axis, определяя тем самым направление для flex-элементов, размещаемых в контейнере.
*/
/**
Определяет, будет ли контейнер однострочным или многострочным, а также направление поперечной оси,
определяющей направление, в котором будут располагаться новые строки.
*/
/**
Определяет выравнивание относительно главной оси. Помогает распределить оставшееся свободное место в случае,
когда элементы строки не «тянутся», либо тянутся, но уже достигли своего максимального размера.
Также позволяет в некотором роде управлять выравниванием элементов при выходе за границы строки.
*/
/**
Определяет поведение по умолчанию для того, как flex-элементы располагаются относительно поперечной оси на текущей строке.
Считайте это версией justify-content для поперечной оси (перпендикулярной к основной).
*/
/**
Выравнивает строки flex-контейнера при наличии свободного места на поперечной оси аналогично тому, как это делает justify-content на главной оси.
*/
/**
Определяет для flex-элемента возможность «вырастать» при необходимости. Принимает безразмерное значение, служащее в качестве пропорции.
Оно определяет, какую долю свободного места внутри контейнера элемент может занять.
*/
/**
Определяет для flex-элемента возможность сжиматься при необходимости.
*/
/**
Определяет размер по умолчанию для элемента перед распределением пространства в контейнере
*/
/* line 1, ../sass/base.scss */
.custom-bar {
  background-color: #0c1f2e;
  width: 100%;
  float: left;
  position: relative;
  height: 36px;
  font-family: "Open Sans";
}

/* line 10, ../sass/base.scss */
.links {
  float: left;
  position: relative;
  white-space: nowrap;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  width: 100%;
}
/* line 11, ../sass/base.scss */
.links .logo {
  float: left;
  position: relative;
  width: 93px;
  background-image: url("../images/logo.png");
  background-repeat: no-repeat;
  height: 36px;
  background-position: left 0px;
}
/* line 27, ../sass/base.scss */
.links.active {
  height: 400px;
}

/* line 32, ../sass/base.scss */
.links-item {
  display: inline-block;
  padding: 8px 19px 0px 19px;
  height: 28px;
}
/* line 37, ../sass/base.scss */
.links-item:hover a {
  color: #fff;
}
/* line 40, ../sass/base.scss */
.links-item:hover .children {
  display: block;
}
/* line 44, ../sass/base.scss */
.links-item .children {
  float: left;
  position: absolute;
  background-color: #142c3f;
  display: none;
  padding: 18px;
  margin-top: 10px;
}
/* line 51, ../sass/base.scss */
.links-item .children ul {
  list-style: none;
  padding: 0px;
  margin: 0px;
}
/* line 55, ../sass/base.scss */
.links-item .children ul li {
  list-style: none;
  padding: 10px 0px;
  margin: 0px;
  line-height: 10px;
}
/* line 60, ../sass/base.scss */
.links-item .children ul li:first-child {
  padding-top: 0px;
}
/* line 63, ../sass/base.scss */
.links-item .children ul li:last-child {
  padding-bottom: 0px;
}
/* line 66, ../sass/base.scss */
.links-item .children ul li a {
  color: #7b8998;
}
/* line 68, ../sass/base.scss */
.links-item .children ul li a:hover {
  color: #fff;
}

/* line 77, ../sass/base.scss */
.links-item a {
  color: #a7b1be;
  font-size: 13px;
  text-decoration: none;
}
